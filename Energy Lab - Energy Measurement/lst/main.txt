; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\inc -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Freescale\Kinetis -D__MICROLIB --omf_browse=.\obj\main.crf src\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Init_Debug_Signals PROC
;;;11     
;;;12     void Init_Debug_Signals(void) {
000000  4826              LDR      r0,|L1.156|
;;;13     	// Enable clock to ports E
;;;14     	SIM->SCGC5 |= SIM_SCGC5_PORTE_MASK;
000002  6b80              LDR      r0,[r0,#0x38]
000004  2101              MOVS     r1,#1
000006  0349              LSLS     r1,r1,#13
000008  4308              ORRS     r0,r0,r1
00000a  4924              LDR      r1,|L1.156|
00000c  6388              STR      r0,[r1,#0x38]
;;;15     	
;;;16     	// Make 3 pins GPIO
;;;17     	PORTE->PCR[DEBUG_RUNNING_POS] &= ~PORT_PCR_MUX_MASK;          
00000e  4824              LDR      r0,|L1.160|
000010  6b80              LDR      r0,[r0,#0x38]
000012  2107              MOVS     r1,#7
000014  0209              LSLS     r1,r1,#8
000016  4388              BICS     r0,r0,r1
000018  4921              LDR      r1,|L1.160|
00001a  6388              STR      r0,[r1,#0x38]
;;;18     	PORTE->PCR[DEBUG_RUNNING_POS] |= PORT_PCR_MUX(1);          
00001c  4608              MOV      r0,r1
00001e  6b80              LDR      r0,[r0,#0x38]
000020  1589              ASRS     r1,r1,#22
000022  4308              ORRS     r0,r0,r1
000024  491e              LDR      r1,|L1.160|
000026  6388              STR      r0,[r1,#0x38]
;;;19     	
;;;20     	// Set ports to outputs
;;;21     	PTE->PDDR |= MASK(DEBUG_RUNNING_POS);
000028  481e              LDR      r0,|L1.164|
00002a  6940              LDR      r0,[r0,#0x14]
00002c  0609              LSLS     r1,r1,#24
00002e  4308              ORRS     r0,r0,r1
000030  491c              LDR      r1,|L1.164|
000032  6148              STR      r0,[r1,#0x14]
;;;22     	
;;;23     	PTE->PSOR |= MASK(DEBUG_RUNNING_POS);
000034  4608              MOV      r0,r1
000036  6840              LDR      r0,[r0,#4]
000038  0589              LSLS     r1,r1,#22
00003a  4308              ORRS     r0,r0,r1
00003c  4919              LDR      r1,|L1.164|
00003e  6048              STR      r0,[r1,#4]
;;;24     }	
000040  4770              BX       lr
;;;25     	
                          ENDP

                  main PROC
;;;29      *----------------------------------------------------------------------------*/
;;;30     int main (void) {
000042  f7fffffe          BL       Init_Debug_Signals
;;;31     		Init_Debug_Signals();
;;;32     		Init_RGB_LEDs();
000046  f7fffffe          BL       Init_RGB_LEDs
;;;33     		Init_ADC();
00004a  f7fffffe          BL       Init_ADC
;;;34     		
;;;35     		// Allow low leakage stop mode
;;;36     		SMC->PMPROT = SMC_PMPROT_ALLS_MASK; // 
00004e  2008              MOVS     r0,#8
000050  4915              LDR      r1,|L1.168|
000052  7008              STRB     r0,[r1,#0]
;;;37     		// Enable low-leakage stop mode and regular run mode
;;;38     		SMC->PMCTRL = SMC_PMCTRL_STOPM(3) | SMC_PMCTRL_RUNM(0);
000054  2003              MOVS     r0,#3
000056  7048              STRB     r0,[r1,#1]
;;;39     		SMC->STOPCTRL = SMC_STOPCTRL_PSTOPO(0) | SMC_STOPCTRL_VLLSM(3);
000058  7088              STRB     r0,[r1,#2]
;;;40     	
;;;41     		// Enable LLWU
;;;42     		// allow LPTMR0 to wake LLWU
;;;43     		LLWU->ME |= LLWU_ME_WUME0_MASK;
00005a  4814              LDR      r0,|L1.172|
00005c  7900              LDRB     r0,[r0,#4]
00005e  2101              MOVS     r1,#1
000060  4308              ORRS     r0,r0,r1
000062  4912              LDR      r1,|L1.172|
000064  7108              STRB     r0,[r1,#4]
;;;44     	
;;;45     	// Enable stop mode (deep sleep)
;;;46     		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000066  4812              LDR      r0,|L1.176|
000068  6900              LDR      r0,[r0,#0x10]
00006a  2104              MOVS     r1,#4
00006c  4308              ORRS     r0,r0,r1
00006e  4910              LDR      r1,|L1.176|
000070  6108              STR      r0,[r1,#0x10]
;;;47     	
;;;48     		Init_LPTMR();
000072  f7fffffe          BL       Init_LPTMR
;;;49     		Start_LPTMR();
000076  f7fffffe          BL       Start_LPTMR
;;;50     	
;;;51     		__enable_irq();
00007a  b662              CPSIE    i
;;;52     	
;;;53     		// work is in interrupt
;;;54     		while (1) {
00007c  e00d              B        |L1.154|
                  |L1.126|
;;;55     			PTE->PCOR |= MASK(DEBUG_RUNNING_POS);
00007e  4809              LDR      r0,|L1.164|
000080  6880              LDR      r0,[r0,#8]
000082  2101              MOVS     r1,#1
000084  0789              LSLS     r1,r1,#30
000086  4308              ORRS     r0,r0,r1
000088  4906              LDR      r1,|L1.164|
00008a  6088              STR      r0,[r1,#8]
;;;56     #if USE_SLEEP_MODES
;;;57     			__wfi() ; // then go to sleep	
00008c  bf30              WFI      
;;;58     #endif
;;;59     			PTE->PSOR |= MASK(DEBUG_RUNNING_POS);
00008e  4608              MOV      r0,r1
000090  6840              LDR      r0,[r0,#4]
000092  0589              LSLS     r1,r1,#22
000094  4308              ORRS     r0,r0,r1
000096  4903              LDR      r1,|L1.164|
000098  6048              STR      r0,[r1,#4]
                  |L1.154|
00009a  e7f0              B        |L1.126|
;;;60     		}
;;;61     }
;;;62     
                          ENDP

                  |L1.156|
                          DCD      0x40048000
                  |L1.160|
                          DCD      0x4004d040
                  |L1.164|
                          DCD      0x400ff100
                  |L1.168|
                          DCD      0x4007e000
                  |L1.172|
                          DCD      0x4007c000
                  |L1.176|
                          DCD      0xe000ed00

;*** Start embedded assembler ***

#line 1 "src\\main.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_ebb4e44d____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_ebb4e44d____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_ebb4e44d____REVSH|
#line 130
|__asm___6_main_c_ebb4e44d____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
