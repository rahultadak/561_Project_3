; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcd_4bit.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\lcd_4bit.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\inc -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Freescale\Kinetis -D__MICROLIB --omf_browse=.\obj\lcd_4bit.crf src\LCD_4bit.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  lcd_read_status PROC
;;;4      
;;;5      static uint8_t lcd_read_status(void)
000000  b510              PUSH     {r4,lr}
;;;6      {
;;;7        uint8_t status;
;;;8      
;;;9        SET_LCD_DATA_DIR_IN
000002  4879              LDR      r0,|L1.488|
000004  6940              LDR      r0,[r0,#0x14]
000006  0900              LSRS     r0,r0,#4
000008  0100              LSLS     r0,r0,#4
00000a  4977              LDR      r1,|L1.488|
00000c  6148              STR      r0,[r1,#0x14]
;;;10       SET_LCD_RS(0)
00000e  2020              MOVS     r0,#0x20
000010  6088              STR      r0,[r1,#8]
;;;11       SET_LCD_RW(1)
000012  0200              LSLS     r0,r0,#8
000014  4974              LDR      r1,|L1.488|
000016  39c0              SUBS     r1,r1,#0xc0
000018  6048              STR      r0,[r1,#4]
;;;12       Delay(1);
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       Delay
;;;13       SET_LCD_E(1)
000020  2010              MOVS     r0,#0x10
000022  4971              LDR      r1,|L1.488|
000024  6048              STR      r0,[r1,#4]
;;;14       Delay(1);
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       Delay
;;;15       status  = GET_LCD_DATA_IN << 4;
00002c  486e              LDR      r0,|L1.488|
00002e  6900              LDR      r0,[r0,#0x10]
000030  0700              LSLS     r0,r0,#28
000032  0e04              LSRS     r4,r0,#24
;;;16       SET_LCD_E(0)
000034  2010              MOVS     r0,#0x10
000036  496c              LDR      r1,|L1.488|
000038  6088              STR      r0,[r1,#8]
;;;17       Delay(1);
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       Delay
;;;18       SET_LCD_E(1)
000040  2010              MOVS     r0,#0x10
000042  4969              LDR      r1,|L1.488|
000044  6048              STR      r0,[r1,#4]
;;;19       Delay(1);
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       Delay
;;;20       status |= GET_LCD_DATA_IN;
00004c  4866              LDR      r0,|L1.488|
00004e  6900              LDR      r0,[r0,#0x10]
000050  0700              LSLS     r0,r0,#28
000052  0f00              LSRS     r0,r0,#28
000054  4304              ORRS     r4,r4,r0
;;;21       SET_LCD_E(0)
000056  2010              MOVS     r0,#0x10
000058  4963              LDR      r1,|L1.488|
00005a  6088              STR      r0,[r1,#8]
;;;22       SET_LCD_DATA_DIR_OUT
00005c  4608              MOV      r0,r1
00005e  6940              LDR      r0,[r0,#0x14]
000060  210f              MOVS     r1,#0xf
000062  4308              ORRS     r0,r0,r1
000064  4960              LDR      r1,|L1.488|
000066  6148              STR      r0,[r1,#0x14]
;;;23       return(status);
000068  4620              MOV      r0,r4
;;;24     }
00006a  bd10              POP      {r4,pc}
;;;25     
                          ENDP

                  wait_while_busy PROC
;;;26     void wait_while_busy(void)
00006c  b510              PUSH     {r4,lr}
;;;27     {
;;;28     	for( ; lcd_read_status() & LCD_BUSY_FLAG_MASK; )
00006e  bf00              NOP      
                  |L1.112|
000070  f7fffffe          BL       lcd_read_status
000074  2180              MOVS     r1,#0x80
000076  4208              TST      r0,r1
000078  d1fa              BNE      |L1.112|
;;;29     		;
;;;30     }
00007a  bd10              POP      {r4,pc}
;;;31     
                          ENDP

                  lcd_write_4bit PROC
;;;32     void lcd_write_4bit(uint8_t c)
00007c  b510              PUSH     {r4,lr}
;;;33     {
00007e  4604              MOV      r4,r0
;;;34       SET_LCD_RW(0)
000080  2001              MOVS     r0,#1
000082  0340              LSLS     r0,r0,#13
000084  4958              LDR      r1,|L1.488|
000086  39c0              SUBS     r1,r1,#0xc0
000088  6088              STR      r0,[r1,#8]
;;;35       SET_LCD_E(1)
00008a  2010              MOVS     r0,#0x10
00008c  4956              LDR      r1,|L1.488|
00008e  6048              STR      r0,[r1,#4]
;;;36       SET_LCD_DATA_OUT(c&0x0F)
000090  4608              MOV      r0,r1
000092  6800              LDR      r0,[r0,#0]
000094  0900              LSRS     r0,r0,#4
000096  0100              LSLS     r0,r0,#4
000098  0721              LSLS     r1,r4,#28
00009a  0f09              LSRS     r1,r1,#28
00009c  4308              ORRS     r0,r0,r1
00009e  4952              LDR      r1,|L1.488|
0000a0  6008              STR      r0,[r1,#0]
;;;37       Delay(1);
0000a2  2001              MOVS     r0,#1
0000a4  f7fffffe          BL       Delay
;;;38       SET_LCD_E(0)
0000a8  2010              MOVS     r0,#0x10
0000aa  494f              LDR      r1,|L1.488|
0000ac  6088              STR      r0,[r1,#8]
;;;39       Delay(1);
0000ae  2001              MOVS     r0,#1
0000b0  f7fffffe          BL       Delay
;;;40     }
0000b4  bd10              POP      {r4,pc}
;;;41     
                          ENDP

                  lcd_write_cmd PROC
;;;42     void lcd_write_cmd(uint8_t c)
0000b6  b510              PUSH     {r4,lr}
;;;43     {
0000b8  4604              MOV      r4,r0
;;;44       wait_while_busy();
0000ba  f7fffffe          BL       wait_while_busy
;;;45     
;;;46       SET_LCD_RS(0)
0000be  2020              MOVS     r0,#0x20
0000c0  4949              LDR      r1,|L1.488|
0000c2  6088              STR      r0,[r1,#8]
;;;47       lcd_write_4bit(c>>4);
0000c4  1120              ASRS     r0,r4,#4
0000c6  f7fffffe          BL       lcd_write_4bit
;;;48       lcd_write_4bit(c);
0000ca  4620              MOV      r0,r4
0000cc  f7fffffe          BL       lcd_write_4bit
;;;49     }
0000d0  bd10              POP      {r4,pc}
;;;50     
                          ENDP

                  lcd_write_data PROC
;;;51     static void lcd_write_data(uint8_t c)
0000d2  b510              PUSH     {r4,lr}
;;;52     {
0000d4  4604              MOV      r4,r0
;;;53       wait_while_busy();
0000d6  f7fffffe          BL       wait_while_busy
;;;54     
;;;55       SET_LCD_RS(1)
0000da  2020              MOVS     r0,#0x20
0000dc  4942              LDR      r1,|L1.488|
0000de  6048              STR      r0,[r1,#4]
;;;56       lcd_write_4bit(c>>4);
0000e0  1120              ASRS     r0,r4,#4
0000e2  f7fffffe          BL       lcd_write_4bit
;;;57       lcd_write_4bit(c);
0000e6  4620              MOV      r0,r4
0000e8  f7fffffe          BL       lcd_write_4bit
;;;58     }
0000ec  bd10              POP      {r4,pc}
;;;59     
                          ENDP

                  lcd_putchar PROC
;;;60     void lcd_putchar(char c)
0000ee  b510              PUSH     {r4,lr}
;;;61     { 
0000f0  4604              MOV      r4,r0
;;;62       lcd_write_data(c);
0000f2  4620              MOV      r0,r4
0000f4  f7fffffe          BL       lcd_write_data
;;;63     }
0000f8  bd10              POP      {r4,pc}
;;;64     
                          ENDP

                  lcd_init_port PROC
;;;65     void lcd_init_port(void) {
0000fa  483c              LDR      r0,|L1.492|
;;;66     	/* Enable clocks for peripherals        */
;;;67       ENABLE_LCD_PORT_CLOCKS                          
0000fc  6b80              LDR      r0,[r0,#0x38]
0000fe  210d              MOVS     r1,#0xd
000100  0249              LSLS     r1,r1,#9
000102  4308              ORRS     r0,r0,r1
000104  4939              LDR      r1,|L1.492|
000106  6388              STR      r0,[r1,#0x38]
;;;68     
;;;69     	/* Set Pin Mux to GPIO */
;;;70     	PIN_DATA_PORT->PCR[PIN_DATA_SHIFT] = PORT_PCR_MUX(1);
000108  1588              ASRS     r0,r1,#22
00010a  4939              LDR      r1,|L1.496|
00010c  6008              STR      r0,[r1,#0]
;;;71     	PIN_DATA_PORT->PCR[PIN_DATA_SHIFT+1] = PORT_PCR_MUX(1);
00010e  6048              STR      r0,[r1,#4]
;;;72     	PIN_DATA_PORT->PCR[PIN_DATA_SHIFT+2] = PORT_PCR_MUX(1);
000110  6088              STR      r0,[r1,#8]
;;;73     	PIN_DATA_PORT->PCR[PIN_DATA_SHIFT+3] = PORT_PCR_MUX(1);
000112  60c8              STR      r0,[r1,#0xc]
;;;74     	PIN_E_PORT->PCR[PIN_E_SHIFT] = PORT_PCR_MUX(1);
000114  6108              STR      r0,[r1,#0x10]
;;;75     	PIN_RW_PORT->PCR[PIN_RW_SHIFT] = PORT_PCR_MUX(1);
000116  4937              LDR      r1,|L1.500|
000118  6348              STR      r0,[r1,#0x34]
;;;76     	PIN_RS_PORT->PCR[PIN_RS_SHIFT] = PORT_PCR_MUX(1);
00011a  4935              LDR      r1,|L1.496|
00011c  6148              STR      r0,[r1,#0x14]
;;;77     }
00011e  4770              BX       lr
;;;78     
                          ENDP

                  Init_LCD PROC
;;;79     void Init_LCD(void)
000120  b510              PUSH     {r4,lr}
;;;80     { 
;;;81     	/* initialize port(s) for LCD */
;;;82     	lcd_init_port();
000122  f7fffffe          BL       lcd_init_port
;;;83     	
;;;84       /* Set all pins for LCD as outputs */
;;;85       SET_LCD_ALL_DIR_OUT
000126  4830              LDR      r0,|L1.488|
000128  6940              LDR      r0,[r0,#0x14]
00012a  210f              MOVS     r1,#0xf
00012c  4308              ORRS     r0,r0,r1
00012e  492e              LDR      r1,|L1.488|
000130  6148              STR      r0,[r1,#0x14]
000132  4608              MOV      r0,r1
000134  6940              LDR      r0,[r0,#0x14]
000136  2110              MOVS     r1,#0x10
000138  4308              ORRS     r0,r0,r1
00013a  492b              LDR      r1,|L1.488|
00013c  6148              STR      r0,[r1,#0x14]
00013e  482a              LDR      r0,|L1.488|
000140  38c0              SUBS     r0,r0,#0xc0
000142  6940              LDR      r0,[r0,#0x14]
000144  2101              MOVS     r1,#1
000146  0349              LSLS     r1,r1,#13
000148  4308              ORRS     r0,r0,r1
00014a  4927              LDR      r1,|L1.488|
00014c  39c0              SUBS     r1,r1,#0xc0
00014e  6148              STR      r0,[r1,#0x14]
000150  4825              LDR      r0,|L1.488|
000152  6940              LDR      r0,[r0,#0x14]
000154  2120              MOVS     r1,#0x20
000156  4308              ORRS     r0,r0,r1
000158  4923              LDR      r1,|L1.488|
00015a  6148              STR      r0,[r1,#0x14]
;;;86       Delay(100);
00015c  2064              MOVS     r0,#0x64
00015e  f7fffffe          BL       Delay
;;;87       SET_LCD_RS(0)
000162  2020              MOVS     r0,#0x20
000164  4920              LDR      r1,|L1.488|
000166  6088              STR      r0,[r1,#8]
;;;88       lcd_write_4bit(0x3);                 
000168  2003              MOVS     r0,#3
00016a  f7fffffe          BL       lcd_write_4bit
;;;89       Delay(100);
00016e  2064              MOVS     r0,#0x64
000170  f7fffffe          BL       Delay
;;;90       lcd_write_4bit(0x3);
000174  2003              MOVS     r0,#3
000176  f7fffffe          BL       lcd_write_4bit
;;;91       Delay(10);
00017a  200a              MOVS     r0,#0xa
00017c  f7fffffe          BL       Delay
;;;92       lcd_write_4bit(0x3);
000180  2003              MOVS     r0,#3
000182  f7fffffe          BL       lcd_write_4bit
;;;93       lcd_write_4bit(0x2);
000186  2002              MOVS     r0,#2
000188  f7fffffe          BL       lcd_write_4bit
;;;94       lcd_write_cmd(0x28);                 
00018c  2028              MOVS     r0,#0x28
00018e  f7fffffe          BL       lcd_write_cmd
;;;95       lcd_write_cmd(0x0C);                 
000192  200c              MOVS     r0,#0xc
000194  f7fffffe          BL       lcd_write_cmd
;;;96       lcd_write_cmd(0x06);                 
000198  2006              MOVS     r0,#6
00019a  f7fffffe          BL       lcd_write_cmd
;;;97       lcd_write_cmd(0x80);                 
00019e  2080              MOVS     r0,#0x80
0001a0  f7fffffe          BL       lcd_write_cmd
;;;98     }
0001a4  bd10              POP      {r4,pc}
;;;99     
                          ENDP

                  Set_Cursor PROC
;;;100    void Set_Cursor(uint8_t column, uint8_t row)
0001a6  b570              PUSH     {r4-r6,lr}
;;;101    {
0001a8  4604              MOV      r4,r0
0001aa  460d              MOV      r5,r1
;;;102      uint8_t address;
;;;103    
;;;104      address =(row * 0x40) + column;
0001ac  01a8              LSLS     r0,r5,#6
0001ae  1900              ADDS     r0,r0,r4
0001b0  b2c6              UXTB     r6,r0
;;;105    	address |= 0x80;
0001b2  2080              MOVS     r0,#0x80
0001b4  4306              ORRS     r6,r6,r0
;;;106      lcd_write_cmd(address);               
0001b6  4630              MOV      r0,r6
0001b8  f7fffffe          BL       lcd_write_cmd
;;;107    }
0001bc  bd70              POP      {r4-r6,pc}
;;;108    
                          ENDP

                  Clear_LCD PROC
;;;109    void Clear_LCD(void)
0001be  b510              PUSH     {r4,lr}
;;;110    {
;;;111      lcd_write_cmd(0x01);                 
0001c0  2001              MOVS     r0,#1
0001c2  f7fffffe          BL       lcd_write_cmd
;;;112      Set_Cursor(0, 0);
0001c6  2100              MOVS     r1,#0
0001c8  4608              MOV      r0,r1
0001ca  f7fffffe          BL       Set_Cursor
;;;113    }
0001ce  bd10              POP      {r4,pc}
;;;114    
                          ENDP

                  Print_LCD PROC
;;;115    void Print_LCD(char *string)
0001d0  b510              PUSH     {r4,lr}
;;;116    {
0001d2  4604              MOV      r4,r0
;;;117      while(*string)  {
0001d4  e003              B        |L1.478|
                  |L1.470|
;;;118        lcd_putchar(*string++);
0001d6  7820              LDRB     r0,[r4,#0]
0001d8  1c64              ADDS     r4,r4,#1
0001da  f7fffffe          BL       lcd_putchar
                  |L1.478|
0001de  7820              LDRB     r0,[r4,#0]            ;117
0001e0  2800              CMP      r0,#0                 ;117
0001e2  d1f8              BNE      |L1.470|
;;;119      }
;;;120    }
0001e4  bd10              POP      {r4,pc}
                          ENDP

0001e6  0000              DCW      0x0000
                  |L1.488|
                          DCD      0x400ff0c0
                  |L1.492|
                          DCD      0x40048000
                  |L1.496|
                          DCD      0x4004c000
                  |L1.500|
                          DCD      0x40049000

;*** Start embedded assembler ***

#line 1 "src\\LCD_4bit.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_LCD_4bit_c_62086be0____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_LCD_4bit_c_62086be0____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_LCD_4bit_c_62086be0____REVSH|
#line 130
|__asm___10_LCD_4bit_c_62086be0____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
